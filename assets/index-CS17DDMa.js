var p=Object.defineProperty;var h=(s,d,e)=>d in s?p(s,d,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[d]=e;var c=(s,d,e)=>h(s,typeof d!="symbol"?d+"":d,e);(function(){const d=document.createElement("link").relList;if(d&&d.supports&&d.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))t(o);new MutationObserver(o=>{for(const r of o)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&t(i)}).observe(document,{childList:!0,subtree:!0});function e(o){const r={};return o.integrity&&(r.integrity=o.integrity),o.referrerPolicy&&(r.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?r.credentials="include":o.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function t(o){if(o.ep)return;o.ep=!0;const r=e(o);fetch(o.href,r)}})();function a(s){localStorage.setItem("todos",JSON.stringify(s))}function g(){const s=localStorage.getItem("todos");return s?JSON.parse(s):[]}const f=":host{display:block;font-family:Arial,sans-serif;max-width:500px;margin:2rem auto;background-color:#f8f9fa;padding:2rem;border-radius:8px;box-shadow:0 4px 6px #0000001a;position:relative}h2{color:#343a40;text-align:center;margin-bottom:1.5rem}.todo-input{display:flex;margin-bottom:1.5rem}input[type=text]{flex-grow:1;padding:.75rem;font-size:1rem;border:1px solid #ced4da;border-radius:4px 0 0 4px;transition:border-color .3s ease}input[type=text]:focus{outline:none;border-color:#007bff}button{padding:.75rem 1.5rem;font-size:1rem;background-color:#007bff;color:#fff;border:none;cursor:pointer;transition:background-color .3s ease}button:hover{background-color:#0056b3}#addTodo{border-radius:0 4px 4px 0}ul{list-style-type:none;padding:0}li{display:flex;align-items:center;padding:1rem;background-color:#fff;border:1px solid #e9ecef;border-radius:4px;margin-bottom:.5rem;transition:background-color .3s ease}li:hover{background-color:#f1f3f5}li input[type=checkbox]{margin-right:1rem}.todo-text{flex-grow:1;margin-right:1rem}.completed .todo-text{text-decoration:line-through;color:#6c757d}.edit-input{flex-grow:1;padding:.5rem;font-size:1rem;border:1px solid #ced4da;border-radius:4px;margin-right:1rem}.button-group{display:flex;gap:.5rem}.edit-btn,.delete-btn{padding:.4rem .8rem;font-size:.875rem;border-radius:4px;transition:background-color .3s ease}.edit-btn{background-color:#28a745}.edit-btn:hover{background-color:#218838}.delete-btn{background-color:#dc3545}.delete-btn:hover{background-color:#c82333}.filters{display:flex;justify-content:center;margin-bottom:1rem}.filter-btn{margin:0 .5rem;padding:.5rem 1rem;background-color:#f8f9fa;border:1px solid #ced4da;border-radius:4px;color:#495057;cursor:pointer;transition:all .3s ease}.filter-btn:hover,.filter-btn.active{background-color:#007bff;border-color:#007bff;color:#fff}.todo-footer{display:flex;justify-content:space-between;align-items:center;margin-top:1rem;padding-top:1rem;border-top:1px solid #e9ecef}#todoCount{color:#6c757d}#clearCompleted{background-color:#6c757d;color:#fff;border:none;padding:.5rem 1rem;border-radius:4px;cursor:pointer;transition:background-color .3s ease}#clearCompleted:hover{background-color:#5a6268}li{display:flex;align-items:center;padding:.5rem;background-color:#fff;border-radius:4px;margin-bottom:.5rem;cursor:move}.drag-handle{margin-right:.5rem;cursor:move;color:#aaa}li.dragging{opacity:.5;border:2px dashed #aaa}li:hover .drag-handle{color:#333}.github-badge{position:absolute;top:10px;right:10px}.github-badge img{width:30px;height:30px;transition:opacity .3s ease}.github-badge img:hover{opacity:.8}";class m extends HTMLElement{constructor(){super();c(this,"todos",[]);c(this,"shadow");c(this,"filter","all");this.shadow=this.attachShadow({mode:"open"})}connectedCallback(){this.render(),this.loadTodos(),this.addEventListeners(),this.initDragAndDrop()}async render(){this.shadow.innerHTML=`
    <style>${f}</style>
    <h2>My Todo List</h2>
    <a href="https://github.com/leon-tech-dev/todo-list-web-component" target="_blank" class="github-badge">
        <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub">
    </a>
    <div class="todo-input">
      <input type="text" placeholder="Add a new todo">
      <button id="addTodo">Add</button>
    </div>
    <div class="filters">
      <button id="filterAll" class="filter-btn active">All</button>
      <button id="filterActive" class="filter-btn">Active</button>
      <button id="filterCompleted" class="filter-btn">Completed</button>
    </div>
    <ul></ul>
    <div class="todo-footer">
      <span class="todo-count"></span>
      <button id="clearCompleted">Clear completed</button>
    </div>
    `,this.updateTodoList()}initDragAndDrop(){const e=this.shadow.querySelector("ul");e&&e.addEventListener("dragover",t=>t.preventDefault())}addEventListeners(){var r,i,n,l;const e=this.shadow.querySelector("input"),t=this.shadow.querySelector("#addTodo"),o=this.shadow.querySelector("ul");t==null||t.addEventListener("click",()=>this.addTodo()),e==null||e.addEventListener("keypress",u=>{u.key==="Enter"&&this.addTodo()}),o==null||o.addEventListener("click",this.handleTodoAction.bind(this)),(r=this.shadow.querySelector("#filterAll"))==null||r.addEventListener("click",()=>this.setFilter("all")),(i=this.shadow.querySelector("#filterActive"))==null||i.addEventListener("click",()=>this.setFilter("active")),(n=this.shadow.querySelector("#filterCompleted"))==null||n.addEventListener("click",()=>this.setFilter("completed")),(l=this.shadow.querySelector("#clearCompleted"))==null||l.addEventListener("click",()=>this.clearCompleted())}clearCompleted(){this.todos=this.todos.filter(e=>!e.completed),a(this.todos),this.updateTodoList()}handleTodoAction(e){const t=e.target,o=Number(t.dataset.id);t.tagName==="INPUT"&&t.type==="checkbox"?this.toggleTodo(o):t.classList.contains("delete-btn")?this.deleteTodo(o):t.classList.contains("edit-btn")&&this.editTodo(o)}addTodo(){const e=this.shadow.querySelector("input"),t=e.value.trim();if(t){const o={id:Date.now(),text:t,completed:!1};this.todos.unshift(o),this.updateTodoList(),e.value="",a(this.todos)}}toggleTodo(e){const t=this.todos.find(o=>o.id===e);t&&(t.completed=!t.completed,this.updateTodoList(),a(this.todos))}deleteTodo(e){this.todos=this.todos.filter(t=>t.id!==e),this.updateTodoList(),a(this.todos)}editTodo(e){const t=this.shadow.querySelector(`li[data-id="${e}"]`),o=this.todos.find(r=>r.id===e);if(t&&o){const r=t.querySelector(".todo-text"),i=document.createElement("input");i.type="text",i.value=o.text,i.className="edit-input",r==null||r.replaceWith(i),i.focus();const n=()=>{o.text=i.value.trim(),this.updateTodoList(),a(this.todos)};i.addEventListener("blur",n),i.addEventListener("keypress",l=>{l.key==="Enter"&&n()})}}updateTodoList(){const e=this.shadow.querySelector("ul");e&&(e.innerHTML=this.getFilteredTodos().map(t=>`
            <li data-id="${t.id}" class="${t.completed?"completed":""}" draggable="true">
              <span class="drag-handle">â˜°</span>
              <input type="checkbox" ${t.completed?"checked":""}>
              <span class="todo-text">${t.text}</span>
              <div class="button-group">
                <button class="edit-btn">Edit</button>
                <button class="delete-btn">Delete</button>
              </div>
            </li>
          `).join(""),e.querySelectorAll("li").forEach(t=>{const o=Number(t.dataset.id),r=t.querySelector('input[type="checkbox"]'),i=t.querySelector(".edit-btn"),n=t.querySelector(".delete-btn");r==null||r.addEventListener("change",()=>this.toggleTodo(o)),i==null||i.addEventListener("click",()=>this.editTodo(o)),n==null||n.addEventListener("click",()=>this.deleteTodo(o)),t.addEventListener("dragstart",this.dragStart.bind(this)),t.addEventListener("dragover",this.dragOver.bind(this)),t.addEventListener("drop",this.drop.bind(this)),t.addEventListener("dragend",this.dragEnd.bind(this))})),this.updateFilterButtons(),this.updateTodoCount()}updateTodoCount(){const e=this.todos.filter(o=>!o.completed).length,t=this.shadow.querySelector(".todo-count");t&&(t.textContent=`${e} item${e!==1?"s":""} left`)}loadTodos(){this.todos=g(),this.updateTodoList()}setFilter(e){this.filter=e,this.updateTodoList()}updateFilterButtons(){var t;this.shadow.querySelectorAll(".filter-btn").forEach(o=>o.classList.remove("active")),(t=this.shadow.querySelector(`#filter${this.filter.charAt(0).toUpperCase()+this.filter.slice(1)}`))==null||t.classList.add("active")}getFilteredTodos(){switch(this.filter){case"active":return this.todos.filter(e=>!e.completed);case"completed":return this.todos.filter(e=>e.completed);default:return this.todos}}dragStart(e){var o;const t=e.target;t.tagName==="LI"&&((o=e.dataTransfer)==null||o.setData("text/plain",t.dataset.id||""),t.classList.add("dragging"))}dragOver(e){var r,i;e.preventDefault();const o=e.target.closest("li");if(o&&!o.classList.contains("dragging")){const n=o.getBoundingClientRect();e.clientY-n.top-n.height/2<0?(r=o.parentElement)==null||r.insertBefore(this.shadow.querySelector(".dragging"),o):(i=o.parentElement)==null||i.insertBefore(this.shadow.querySelector(".dragging"),o.nextElementSibling)}}drop(e){e.preventDefault()}dragEnd(e){const t=e.target;t.tagName==="LI"&&(t.classList.remove("dragging"),this.updateTodosOrder())}updateTodosOrder(){const e=this.shadow.querySelector("ul");if(e){const t=Array.from(e.querySelectorAll("li")).map(o=>Number(o.dataset.id));this.todos=t.map(o=>this.todos.find(r=>r.id===o)).filter(Boolean),this.saveTodos()}}saveTodos(){a(this.todos)}}customElements.define("todo-list",m);
